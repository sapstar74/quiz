"""
üéµ Major Record Labels Logo Downloader
Let√∂lti a nagyobb zenei kiad√≥k log√≥it
"""

import requests
import os
import json
from pathlib import Path
import time
from urllib.parse import urljoin, urlparse
import streamlit as st
from PIL import Image
import io

# Major zenei kiad√≥k adatai
MAJOR_LABELS = {
    "universal_music_group": {
        "name": "Universal Music Group",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Universal_Music_Group_Logo.svg/320px-Universal_Music_Group_Logo.svg.png",
        "website": "https://www.universalmusic.com/",
        "founded": "1934",
        "headquarters": "Santa Monica, California, USA"
    },
    "sony_music": {
        "name": "Sony Music Entertainment",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Sony_Music_Entertainment_Logo.svg/320px-Sony_Music_Entertainment_Logo.svg.png",
        "website": "https://www.sonymusic.com/",
        "founded": "1929",
        "headquarters": "New York City, USA"
    },
    "warner_music": {
        "name": "Warner Music Group",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Warner_Music_Group_2013_logo.svg/320px-Warner_Music_Group_2013_logo.svg.png",
        "website": "https://www.wmg.com/",
        "founded": "1958",
        "headquarters": "New York City, USA"
    },
    "emi": {
        "name": "EMI Records",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/EMI_Records_Logo.svg/320px-EMI_Records_Logo.svg.png",
        "website": "https://www.emimusic.com/",
        "founded": "1931",
        "headquarters": "London, UK"
    },
    "capitol_records": {
        "name": "Capitol Records",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Capitol_Records_Logo.svg/320px-Capitol_Records_Logo.svg.png",
        "website": "https://www.capitolrecords.com/",
        "founded": "1942",
        "headquarters": "Hollywood, California, USA"
    },
    "columbia_records": {
        "name": "Columbia Records",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Columbia_Records_Logo.svg/320px-Columbia_Records_Logo.svg.png",
        "website": "https://www.columbiarecords.com/",
        "founded": "1887",
        "headquarters": "New York City, USA"
    },
    "atlantic_records": {
        "name": "Atlantic Records",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Atlantic_Records_Logo.svg/320px-Atlantic_Records_Logo.svg.png",
        "website": "https://www.atlanticrecords.com/",
        "founded": "1947",
        "headquarters": "New York City, USA"
    },
    "republic_records": {
        "name": "Republic Records",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Republic_Records_Logo.svg/320px-Republic_Records_Logo.svg.png",
        "website": "https://www.republicrecords.com/",
        "founded": "1995",
        "headquarters": "New York City, USA"
    },
    "def_jam": {
        "name": "Def Jam Recordings",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/Def_Jam_Recordings_Logo.svg/320px-Def_Jam_Recordings_Logo.svg.png",
        "website": "https://www.defjam.com/",
        "founded": "1984",
        "headquarters": "New York City, USA"
    },
    "interscope": {
        "name": "Interscope Records",
        "logo_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Interscope_Records_Logo.svg/320px-Interscope_Records_Logo.svg.png",
        "website": "https://www.interscope.com/",
        "founded": "1990",
        "headquarters": "Santa Monica, California, USA"
    }
}

def download_logo(url, filename, output_dir="major_labels_logos"):
    """Let√∂lt egy log√≥t"""
    try:
        # K√∂nyvt√°r l√©trehoz√°sa
        os.makedirs(output_dir, exist_ok=True)
        
        # Headers a let√∂lt√©shez
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        
        # F√°jl ment√©se
        file_path = os.path.join(output_dir, filename)
        with open(file_path, 'wb') as f:
            f.write(response.content)
        
        print(f"‚úÖ Let√∂ltve: {filename}")
        return file_path
        
    except Exception as e:
        print(f"‚ùå Hiba a let√∂lt√©s sor√°n {filename}: {e}")
        return None

def download_all_major_labels(output_dir="major_labels_logos"):
    """Let√∂lti az √∂sszes major label log√≥t"""
    print("üéµ Major Record Labels Logo Downloader")
    print("=" * 50)
    
    results = {
        "success": [],
        "failed": [],
        "total": len(MAJOR_LABELS)
    }
    
    for label_id, label_info in MAJOR_LABELS.items():
        print(f"\nüì• Let√∂lt√©s: {label_info['name']}")
        
        # F√°jln√©v gener√°l√°s
        filename = f"{label_id}_{label_info['name'].replace(' ', '_').replace('.', '')}.png"
        
        # Log√≥ let√∂lt√©se
        file_path = download_logo(label_info['logo_url'], filename, output_dir)
        
        if file_path:
            results["success"].append({
                "label_id": label_id,
                "name": label_info['name'],
                "file_path": file_path
            })
        else:
            results["failed"].append({
                "label_id": label_id,
                "name": label_info['name'],
                "url": label_info['logo_url']
            })
        
        # Kis sz√ºnet a t√∫l gyors k√©r√©sek elker√ºl√©s√©re
        time.sleep(1)
    
    # Eredm√©nyek ment√©se
    results_file = os.path.join(output_dir, "download_results.json")
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    # √ñsszefoglal√≥
    print(f"\n" + "=" * 50)
    print(f"üìä √ñSSZEFOGLAL√ì:")
    print(f"‚úÖ Sikeres let√∂lt√©sek: {len(results['success'])}")
    print(f"‚ùå Sikertelen let√∂lt√©sek: {len(results['failed'])}")
    print(f"üìÅ Ment√©s helye: {output_dir}")
    
    if results['failed']:
        print(f"\n‚ùå Sikertelen let√∂lt√©sek:")
        for failed in results['failed']:
            print(f"  - {failed['name']}")
    
    return results

def create_labels_info_file(output_dir="major_labels_logos"):
    """L√©trehoz egy inform√°ci√≥s f√°jlt a kiad√≥kr√≥l"""
    info_file = os.path.join(output_dir, "labels_info.json")
    with open(info_file, 'w', encoding='utf-8') as f:
        json.dump(MAJOR_LABELS, f, indent=2, ensure_ascii=False)
    print(f"üìÑ Inform√°ci√≥s f√°jl mentve: {info_file}")

def streamlit_app():
    """Streamlit alkalmaz√°s a logo let√∂lt√©shez"""
    st.set_page_config(
        page_title="üéµ Major Labels Logo Downloader",
        page_icon="üéµ",
        layout="wide"
    )
    
    st.title("üéµ Major Record Labels Logo Downloader")
    st.markdown("**Let√∂lti a nagyobb zenei kiad√≥k log√≥it**")
    st.markdown("---")
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Be√°ll√≠t√°sok")
        
        output_dir = st.text_input(
            "Kimeneti mappa:", 
            value="major_labels_logos",
            help="A mappa neve, ahov√° a log√≥k ment√©sre ker√ºlnek"
        )
        
        st.markdown("---")
        st.subheader("üìä El√©rhet≈ë Kiad√≥k")
        st.metric("√ñsszes kiad√≥", len(MAJOR_LABELS))
        
        # Let√∂lt√©s gomb
        if st.button("üì• √ñsszes Log√≥ Let√∂lt√©se", type="primary"):
            with st.spinner("Log√≥k let√∂lt√©se folyamatban..."):
                results = download_all_major_labels(output_dir)
                create_labels_info_file(output_dir)
                
                st.success(f"‚úÖ K√©sz! {len(results['success'])}/{results['total']} log√≥ let√∂ltve")
                
                if results['failed']:
                    st.warning(f"‚ö†Ô∏è {len(results['failed'])} log√≥ let√∂lt√©se sikertelen")
    
    # F≈ë tartalom - Kiad√≥k list√°ja
    st.header("üè¢ Major Record Labels")
    
    # Kiad√≥k megjelen√≠t√©se
    cols = st.columns(2)
    
    for i, (label_id, label_info) in enumerate(MAJOR_LABELS.items()):
        col = cols[i % 2]
        
        with col:
            with st.expander(f"üéµ {label_info['name']}"):
                st.write(f"**Alap√≠tva:** {label_info['founded']}")
                st.write(f"**Sz√©khely:** {label_info['headquarters']}")
                st.write(f"**Website:** {label_info['website']}")
                
                # Log√≥ URL megjelen√≠t√©se
                st.write(f"**Log√≥ URL:** {label_info['logo_url']}")
                
                # Egyedi let√∂lt√©s gomb
                if st.button(f"üì• {label_info['name']} log√≥ let√∂lt√©se", key=f"download_{label_id}"):
                    filename = f"{label_id}_{label_info['name'].replace(' ', '_').replace('.', '')}.png"
                    with st.spinner(f"{label_info['name']} log√≥ let√∂lt√©se..."):
                        file_path = download_logo(label_info['logo_url'], filename, output_dir)
                        if file_path:
                            st.success(f"‚úÖ {label_info['name']} log√≥ let√∂ltve!")
                        else:
                            st.error(f"‚ùå Hiba a {label_info['name']} log√≥ let√∂lt√©se sor√°n")
    
    # Inform√°ci√≥s szekci√≥
    st.markdown("---")
    st.header("‚ÑπÔ∏è Inform√°ci√≥")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Mit csin√°l ez az alkalmaz√°s?")
        st.write("""
        - Let√∂lti a major zenei kiad√≥k log√≥it
        - PNG form√°tumban menti a f√°jlokat
        - Inform√°ci√≥kat szolg√°ltat a kiad√≥kr√≥l
        - JSON f√°jlban menti a metaadatokat
        """)
    
    with col2:
        st.subheader("üìÅ Kimeneti f√°jlok")
        st.write("""
        - `{label_id}_{name}.png` - Log√≥ f√°jlok
        - `download_results.json` - Let√∂lt√©si eredm√©nyek
        - `labels_info.json` - Kiad√≥k inform√°ci√≥i
        """)

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "streamlit":
        streamlit_app()
    else:
        # Konzol verzi√≥
        print("üéµ Major Record Labels Logo Downloader")
        print("=" * 50)
        
        output_dir = input("Kimeneti mappa neve (Enter = 'major_labels_logos'): ").strip()
        if not output_dir:
            output_dir = "major_labels_logos"
        
        results = download_all_major_labels(output_dir)
        create_labels_info_file(output_dir)
        
        print(f"\nüéâ Befejezve! Ellen≈ërizd a '{output_dir}' mapp√°t.") 