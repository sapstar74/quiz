import streamlit as st
import random

# Page config
st.set_page_config(
    page_title="M≈±k√∂d≈ë Quiz",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Session state inicializ√°l√°sa
if 'quiz_started' not in st.session_state:
    st.session_state.quiz_started = False
if 'current_question' not in st.session_state:
    st.session_state.current_question = 0
if 'score' not in st.session_state:
    st.session_state.score = 0

# K√©rd√©sek
questions = {
    "f√∂ldrajz": [
        {
            "question": "Mi Magyarorsz√°g f≈ëv√°rosa?",
            "options": ["Budapest", "Debrecen", "Szeged", "Miskolc"],
            "correct": 0,
            "explanation": "Budapest Magyarorsz√°g f≈ëv√°rosa."
        },
        {
            "question": "Melyik a vil√°g leghosszabb foly√≥ja?",
            "options": ["Amazonas", "N√≠lus", "Jangce", "Mississippi"],
            "correct": 1,
            "explanation": "A N√≠lus a vil√°g leghosszabb foly√≥ja."
        }
    ],
    "h√°bor√∫k": [
        {
            "question": "Mikor zajlott az I. vil√°gh√°bor√∫?",
            "options": ["1914-1918", "1939-1945", "1912-1913", "1918-1920"],
            "correct": 0,
            "explanation": "Az I. vil√°gh√°bor√∫ 1914-1918 k√∂z√∂tt zajlott."
        },
        {
            "question": "Mikor zajlott a Tizenh√°rom √©ves h√°bor√∫?",
            "options": ["1454-1466", "1466-1478", "1478-1490", "1490-1502"],
            "correct": 0,
            "explanation": "A Tizenh√°rom √©ves h√°bor√∫ 1454-1466 k√∂z√∂tt zajlott."
        }
    ],
    "irodalom": [
        {
            "question": "Ki √≠rta a Romeo √©s J√∫li√°t?",
            "options": ["William Shakespeare", "Charles Dickens", "Jane Austen", "Mark Twain"],
            "correct": 0,
            "explanation": "A Romeo √©s J√∫li√°t William Shakespeare √≠rta."
        }
    ]
}

st.title("üß† M≈±k√∂d≈ë Quiz Alkalmaz√°s")

# Sidebar - ez most biztosan megjelenik
st.sidebar.title("‚öôÔ∏è Be√°ll√≠t√°sok")

# T√©mak√∂r√∂k kiv√°laszt√°sa
st.sidebar.subheader("üìö T√©mak√∂r√∂k")
available_topics = list(questions.keys())
selected_topics = st.sidebar.multiselect(
    "V√°laszd ki a t√©mak√∂r√∂ket:",
    available_topics,
    default=available_topics[:2]
)

# K√©rd√©sek sz√°ma
st.sidebar.subheader("üìä K√©rd√©sek")
num_questions = st.sidebar.slider(
    "K√©rd√©sek sz√°ma:",
    min_value=1,
    max_value=10,
    value=5,
    step=1
)

# Quiz ind√≠t√°sa gomb
st.sidebar.markdown("---")
if st.sidebar.button("üöÄ Quiz Ind√≠t√°sa", type="primary", use_container_width=True):
    if not selected_topics:
        st.sidebar.error("K√©rlek v√°lassz ki legal√°bb egy t√©mak√∂rt!")
    else:
        # √ñsszes k√©rd√©s √∂sszegy≈±jt√©se
        all_questions = []
        for topic in selected_topics:
            all_questions.extend(questions[topic])
        
        # V√©letlenszer≈± kiv√°laszt√°s
        if len(all_questions) < num_questions:
            st.sidebar.warning(f"Csak {len(all_questions)} k√©rd√©s √°ll rendelkez√©sre.")
            quiz_questions = all_questions
        else:
            quiz_questions = random.sample(all_questions, num_questions)
        
        # Quiz ind√≠t√°sa
        st.session_state.quiz_started = True
        st.session_state.current_question = 0
        st.session_state.score = 0
        st.session_state.quiz_questions = quiz_questions
        st.rerun()

# F≈ë tartalom
if not st.session_state.quiz_started:
    st.markdown("""
    ## √údv√∂z√∂llek! üéØ
    
    ### Hogyan m≈±k√∂dik:
    1. **V√°laszd ki a t√©mak√∂r√∂ket** a bal oldali men√ºben
    2. **√Åll√≠tsd be a k√©rd√©sek sz√°m√°t**
    3. **Ind√≠tsd el a quiz-t** a gombra kattintva
    4. **V√°laszolj a k√©rd√©sekre**
    
    ### El√©rhet≈ë t√©mak√∂r√∂k:
    - üåç **F√∂ldrajz**: Orsz√°gok, v√°rosok
    - ‚öîÔ∏è **H√°bor√∫k**: T√∂rt√©nelmi konfliktusok
    - üìö **Irodalom**: K√∂nyvek, szerz≈ëk
    """)
    
    # Statisztik√°k
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("√ñsszes k√©rd√©s", sum(len(q) for q in questions.values()))
    with col2:
        st.metric("T√©mak√∂r√∂k", len(questions))
    with col3:
        st.metric("F√∂ldrajzi k√©rd√©sek", len(questions["f√∂ldrajz"]))

else:
    # Quiz megjelen√≠t√©se
    if st.session_state.current_question < len(st.session_state.quiz_questions):
        question = st.session_state.quiz_questions[st.session_state.current_question]
        
        # Progress
        progress = (st.session_state.current_question + 1) / len(st.session_state.quiz_questions)
        st.progress(progress)
        st.caption(f"K√©rd√©s {st.session_state.current_question + 1} / {len(st.session_state.quiz_questions)}")
        
        # K√©rd√©s
        st.subheader(f"‚ùì {question['question']}")
        
        # V√°laszlehet≈ës√©gek
        for i, option in enumerate(question['options']):
            if st.button(f"{chr(65+i)}. {option}", key=f"q{st.session_state.current_question}_opt{i}", use_container_width=True):
                if i == question['correct']:
                    st.success("‚úÖ Helyes v√°lasz!")
                    st.session_state.score += 1
                else:
                    st.error(f"‚ùå Helytelen! A helyes v√°lasz: {chr(65+question['correct'])}. {question['options'][question['correct']]}")
                
                # Magyar√°zat
                st.info(f"üí° **Magyar√°zat:** {question['explanation']}")
                
                # K√∂vetkez≈ë k√©rd√©s
                st.session_state.current_question += 1
                if st.session_state.current_question < len(st.session_state.quiz_questions):
                    st.rerun()
                else:
                    st.rerun()
    else:
        # Eredm√©nyek
        st.success("üèÜ Quiz befejezve!")
        score = st.session_state.score
        total = len(st.session_state.quiz_questions)
        percentage = (score / total) * 100
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Helyes v√°laszok", f"{score}/{total}")
        with col2:
            st.metric("Sz√°zal√©k", f"{percentage:.1f}%")
        with col3:
            if percentage >= 80:
                grade = "A"
                emoji = "üåü"
            elif percentage >= 60:
                grade = "B"
                emoji = "üëç"
            else:
                grade = "C"
                emoji = "üòä"
            st.metric("Oszt√°lyzat", f"{grade} {emoji}")
        
        # √öj quiz gomb
        if st.button("üîÑ √öj Quiz", type="primary"):
            st.session_state.quiz_started = False
            st.rerun()

# Debug inform√°ci√≥k a sidebar alj√°n
st.sidebar.markdown("---")
st.sidebar.caption("Debug info:")
st.sidebar.write(f"Quiz ind√≠tva: {st.session_state.quiz_started}")
if st.session_state.quiz_started:
    st.sidebar.write(f"K√©rd√©s: {st.session_state.current_question}")
    st.sidebar.write(f"Pontsz√°m: {st.session_state.score}") 