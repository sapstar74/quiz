"""
üß† PDF Alap√∫ Quiz Alkalmaz√°s
10 k√©rd√©ses feleletv√°laszt√≥s teszt a felt√∂lt√∂tt PDF tartalom alapj√°n
"""

import streamlit as st
import random
import time
from datetime import datetime
import os
from pathlib import Path
from topics.foldrajz import FOLDRAJZ_QUESTIONS
from classical_music_questions_tschaikovsky_updated import CLASSICAL_MUSIC_QUESTIONS as ZENEK_QUESTIONS
from topics.tudosok import TUDOSOK_QUESTIONS
from topics.mitologia_all_questions import MITOLOGIA_QUESTIONS_ALL
from topics.haboru_all_questions import HABORU_QUESTIONS_ALL
from topics.kiralyok import KIRALYOK_QUESTIONS
from topics.allatok_balanced import ALLATOK_QUESTIONS_BALANCED
from topics.dramak import DRAMAK_QUESTIONS
from topics.sport_logok import SPORT_LOGOK_QUESTIONS
from topics.zaszlok_all_questions import ZASZLOK_QUESTIONS_ALL
from topics.magyar_zenekarok import MAGYAR_ZENEKAROK_QUESTIONS
from topics.nemzetkozi_zenekarok import NEMZETKOZI_ZENEKAROK_QUESTIONS
from topics.idiota_szavak_reversed import IDIOTA_SZAVAK_QUESTIONS

# Page config
st.set_page_config(
    page_title="Quiz App",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    .topic-button {
        background-color: #f0f2f6;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .topic-button:hover {
        background-color: #e0e0e0;
        border-color: #1f77b4;
    }
    .topic-button.selected {
        background-color: #1f77b4;
        color: white;
        border-color: #1f77b4;
    }
    .quiz-container {
        background-color: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    .question-text {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1.5rem;
        color: #ffffff;
    }
    .option-button {
        width: 100%;
        text-align: left;
        padding: 1rem;
        margin: 0.5rem 0;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        background-color: transparent;
        transition: all 0.3s ease;
    }
    .option-button:hover {
        background-color: #e9ecef;
        border-color: #1f77b4;
    }
    .option-button.selected {
        background-color: #1f77b4;
        color: white;
        border-color: #1f77b4;
    }
    .option-button.correct {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }
    .option-button.incorrect {
        background-color: #dc3545;
        color: white;
        border-color: #dc3545;
    }
    .score-display {
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        padding: 1rem;
        background-color: transparent;
        border-radius: 10px;
        margin: 1rem 0;
        color: #ffffff;
    }
    .summary-box {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        border-left: 4px solid #1f77b4;
    }
</style>
""", unsafe_allow_html=True)

# Quiz adatok t√©mak√∂r√∂k szerint csoportos√≠tva
QUIZ_DATA_BY_TOPIC = {
    "f√∂ldrajz": FOLDRAJZ_QUESTIONS,
    "komolyzene": ZENEK_QUESTIONS,
    "magyar_zenekarok": MAGYAR_ZENEKAROK_QUESTIONS,
    "nemzetkozi_zenekarok": NEMZETKOZI_ZENEKAROK_QUESTIONS,
    "h√°bor√∫k": HABORU_QUESTIONS_ALL,
    "magyar_kir√°lyok": KIRALYOK_QUESTIONS,
    "tud√≥sok": TUDOSOK_QUESTIONS,
    "mitol√≥gia": MITOLOGIA_QUESTIONS_ALL,
    "√°llatok": ALLATOK_QUESTIONS_BALANCED,
    "dr√°m√°k": DRAMAK_QUESTIONS,
    "sport_log√≥k": SPORT_LOGOK_QUESTIONS,
    "z√°szl√≥k": ZASZLOK_QUESTIONS_ALL,
    "idi√≥ta_szavak": IDIOTA_SZAVAK_QUESTIONS,
}

# Initialize session state
if 'quiz_state' not in st.session_state:
    st.session_state.quiz_state = 'selection'
    st.session_state.selected_topics = []
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_questions = []
    st.session_state.quiz_start_time = None

def reset_quiz():
    st.session_state.quiz_state = 'selection'
    st.session_state.selected_topics = []
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_questions = []
    st.session_state.quiz_start_time = None
    st.session_state.selected_answer = None

def start_quiz():
    if not st.session_state.selected_topics:
        st.error("K√©rlek v√°lassz ki legal√°bb egy t√©mak√∂rt!")
        return
    
    all_questions = []
    
    # Zenei t√©mak√∂r√∂k k√ºl√∂n kezel√©se
    music_topics = ["komolyzene", "magyar_zenekarok", "nemzetkozi_zenekarok"]
    other_topics = [t for t in st.session_state.selected_topics if t not in music_topics]
    
    # Zenei t√©mak√∂r√∂k kezel√©se
    selected_music_topics = [t for t in st.session_state.selected_topics if t in music_topics]
    if selected_music_topics:
        music_total_questions = st.session_state.get('music_total_questions', 10)
        music_auto_distribute = st.session_state.get('music_auto_distribute', True)
        
        if music_auto_distribute:
            # Automatikus eloszt√°s a zenei t√©mak√∂r√∂k k√∂z√∂tt
            questions_per_music_topic = music_total_questions // len(selected_music_topics)
            remaining_music_questions = music_total_questions % len(selected_music_topics)
            
            for i, topic in enumerate(selected_music_topics):
                if topic in QUIZ_DATA_BY_TOPIC:
                    topic_questions = QUIZ_DATA_BY_TOPIC[topic]
                    current_questions = questions_per_music_topic + (1 if i < remaining_music_questions else 0)
                    current_questions = min(current_questions, len(topic_questions))
                    
                    # V√©letlenszer≈± k√©rd√©sek kiv√°laszt√°sa
                    selected_questions = random.sample(topic_questions, current_questions)
                    all_questions.extend(selected_questions)
        else:
            # Manu√°lis be√°ll√≠t√°s minden zenei t√©mak√∂rh√∂z
            for topic in selected_music_topics:
                if topic in QUIZ_DATA_BY_TOPIC:
                    topic_questions = QUIZ_DATA_BY_TOPIC[topic]
                    num_questions = st.session_state.topic_num_questions.get(topic, min(10, len(topic_questions)))
                    num_questions = min(num_questions, len(topic_questions))
                    
                    # V√©letlenszer≈± k√©rd√©sek kiv√°laszt√°sa
                    selected_questions = random.sample(topic_questions, num_questions)
                    all_questions.extend(selected_questions)
    
    # Egy√©b t√©mak√∂r√∂k - automatikus vagy manu√°lis eloszt√°s
    if other_topics:
        if st.session_state.get('auto_distribute', True):
            # Automatikus eloszt√°s
            total_questions = st.session_state.get('total_questions', 10)
            questions_per_topic = total_questions // len(other_topics)
            remaining_questions = total_questions % len(other_topics)
            
            for i, topic in enumerate(other_topics):
                if topic in QUIZ_DATA_BY_TOPIC:
                    current_questions = questions_per_topic + (1 if i < remaining_questions else 0)
                    current_questions = min(current_questions, len(QUIZ_DATA_BY_TOPIC[topic]))
                    
                    qs = random.sample(QUIZ_DATA_BY_TOPIC[topic], k=current_questions)
                    all_questions.extend(qs)
        else:
            # Manu√°lis eloszt√°s
            for topic in other_topics:
                if topic in QUIZ_DATA_BY_TOPIC:
                    n = st.session_state.topic_num_questions.get(topic, min(10, len(QUIZ_DATA_BY_TOPIC[topic])))
                    qs = random.sample(QUIZ_DATA_BY_TOPIC[topic], k=min(n, len(QUIZ_DATA_BY_TOPIC[topic])))
                    all_questions.extend(qs)
    
    if not all_questions:
        st.error("Nincsenek k√©rd√©sek a kiv√°lasztott t√©mak√∂r√∂kben!")
        return
    
    random.shuffle(all_questions)
    st.session_state.quiz_questions = all_questions
    st.session_state.quiz_state = 'quiz'
    st.session_state.current_question = 0
    st.session_state.score = 0
    st.session_state.answers = []
    st.session_state.quiz_start_time = datetime.now()
    st.session_state.selected_answer = None

def main():
    st.markdown('<h1 class="main-header">üéØ Quiz Alkalmaz√°s</h1>', unsafe_allow_html=True)
    
    # Sidebar settings
    with st.sidebar:
        st.header("‚öôÔ∏è Be√°ll√≠t√°sok")
        
        # Time limit
        time_limit = st.slider("Id≈ëkorl√°t (perc):", 1, 60, 30)
        
        # Show explanations
        show_explanations = st.checkbox("Magyar√°zatok megjelen√≠t√©se", value=True)
        
        # Auto-advance
        auto_advance = st.checkbox("Automatikus tov√°bbl√©p√©s", value=False)
        
        if st.button("üîÑ √öjraind√≠t√°s"):
            reset_quiz()
    
    # Main content
    if st.session_state.quiz_state == 'selection':
        show_topic_selection()
    elif st.session_state.quiz_state == 'quiz':
        show_quiz()
    elif st.session_state.quiz_state == 'results':
        show_results()

def show_topic_selection():
    st.markdown("## üìö V√°lassz t√©mak√∂r√∂ket")
    
    # T√©mak√∂r√∂k csoportos√≠t√°sa
    music_topics = {
        "komolyzene": "üéº Komolyzene",
        "magyar_zenekarok": "üá≠üá∫üéµ Magyar Zenekarok", 
        "nemzetkozi_zenekarok": "üåçüéµ Nemzetk√∂zi Zenekarok"
    }
    
    other_topics = {
        "f√∂ldrajz": "üåç F√∂ldrajz",
        "tud√≥sok": "üî¨ Tud√≥sok", 
        "mitol√≥gia": "üèõÔ∏è Mitol√≥gia", 
        "h√°bor√∫k": "‚öîÔ∏è H√°bor√∫k",
        "magyar_kir√°lyok": "üëë Magyar Kir√°lyok",
        "√°llatok": "ü¶Å √Ållatok",
        "dr√°m√°k": "üé≠ Dr√°m√°k",
        "sport_log√≥k": "üèà Sport Log√≥k",
        "z√°szl√≥k": "üè≥Ô∏è Z√°szl√≥k",
        "idi√≥ta_szavak": "ü§™ Idi√≥ta Szavak"
    }
    
    if 'topic_num_questions' not in st.session_state:
        st.session_state.topic_num_questions = {k: min(10, len(QUIZ_DATA_BY_TOPIC[k])) for k in QUIZ_DATA_BY_TOPIC}
    
    # Zenei k√©rd√©ssz√°m be√°ll√≠t√°sa - mindig megjelenik
    st.markdown("### üéµ Zenei k√©rd√©ssz√°m be√°ll√≠t√°sa")
    music_selected = [topic for topic in music_topics.keys() if topic in st.session_state.selected_topics]
    total_music_questions = sum(len(QUIZ_DATA_BY_TOPIC[topic]) for topic in music_topics.keys())
    
    music_questions = st.slider(
        "Zenei k√©rd√©sek sz√°ma:",
        min_value=1,
        max_value=total_music_questions,
        value=st.session_state.get('music_total_questions', 10),
        key="music_total_questions_slider"
    )
    st.session_state.music_total_questions = music_questions
    
    # Automatikus eloszt√°s a zenei t√©mak√∂r√∂k k√∂z√∂tt
    music_auto_distribute = st.checkbox(
        "Automatikus eloszt√°s zenei t√©mak√∂r√∂k k√∂z√∂tt",
        value=st.session_state.get('music_auto_distribute', True),
        key="music_auto_distribute"
    )
    
    if music_auto_distribute and music_selected:
        questions_per_music_topic = music_questions // len(music_selected)
        remaining_music_questions = music_questions % len(music_selected)
        st.info(f"üìä Zenei k√©rd√©sek eloszt√°sa: {questions_per_music_topic} k√©rd√©s/t√©mak√∂r + {remaining_music_questions} extra")
    
    # Zenei t√©mak√∂r√∂k k√ºl√∂n blokkban
    st.markdown("### üéµ Zenei T√©mak√∂r√∂k")
    
    music_col1, music_col2, music_col3 = st.columns(3)
    
    for i, (topic, display_name) in enumerate(music_topics.items()):
        col = music_col1 if i == 0 else music_col2 if i == 1 else music_col3
        with col:
            is_selected = topic in st.session_state.selected_topics
            if st.button(
                f"{display_name} ({len(QUIZ_DATA_BY_TOPIC[topic])} k√©rd√©s)",
                key=f"music_topic_{topic}",
                type="primary" if is_selected else "secondary",
                use_container_width=True
            ):
                if topic in st.session_state.selected_topics:
                    st.session_state.selected_topics.remove(topic)
                else:
                    st.session_state.selected_topics.append(topic)
                st.rerun()
            
            if is_selected and not st.session_state.get('music_auto_distribute', True):
                max_q = len(QUIZ_DATA_BY_TOPIC[topic])
                # Zenei t√©mak√∂r√∂kn√©l manu√°lis k√©rd√©ssz√°m v√°laszt√°s (ha nincs automatikus eloszt√°s)
                st.session_state.topic_num_questions[topic] = st.slider(
                    f"K√©rd√©sek sz√°ma ({display_name.split(' ', 1)[1]}):",
                    min_value=1,
                    max_value=max_q,
                    value=st.session_state.topic_num_questions.get(topic, min(10, max_q)),
                    key=f"music_slider_{topic}"
                )
    
    st.markdown("---")
    
    # Egy√©b k√©rd√©ssz√°m be√°ll√≠t√°sa - mindig megjelenik
    st.markdown("### üìö Egy√©b k√©rd√©ssz√°m be√°ll√≠t√°sa")
    total_other_questions = sum(len(QUIZ_DATA_BY_TOPIC[topic]) for topic in other_topics.keys())
    
    total_questions = st.slider(
        "√ñsszes k√©rd√©s sz√°ma (egy√©b t√©mak√∂r√∂k):",
        min_value=1,
        max_value=total_other_questions,
        value=st.session_state.get('total_questions', 10),
        key="total_questions_slider"
    )
    st.session_state.total_questions = total_questions
    
    # Egy√©b t√©mak√∂r√∂k
    st.markdown("### üìö Egy√©b T√©mak√∂r√∂k")
    col1, col2 = st.columns(2)
    
    for i, (topic, display_name) in enumerate(other_topics.items()):
        is_selected = topic in st.session_state.selected_topics
        col = col1 if i % 2 == 0 else col2
        with col:
            if st.button(
                f"{display_name} ({len(QUIZ_DATA_BY_TOPIC[topic])} k√©rd√©s)",
                key=f"topic_{topic}",
                type="primary" if is_selected else "secondary",
                use_container_width=True
            ):
                if topic in st.session_state.selected_topics:
                    st.session_state.selected_topics.remove(topic)
                else:
                    st.session_state.selected_topics.append(topic)
                st.rerun()
            
            if is_selected:
                max_q = len(QUIZ_DATA_BY_TOPIC[topic])
                # Automatikus eloszt√°s be√°ll√≠t√°s
                auto_distribute = st.checkbox(
                    "Automatikus eloszt√°s",
                    value=st.session_state.get(f'auto_distribute_{topic}', True),
                    key=f"auto_{topic}"
                )
                
                if not auto_distribute:
                    st.session_state.topic_num_questions[topic] = st.slider(
                        f"K√©rd√©sek sz√°ma ({display_name.split(' ', 1)[1]}):",
                        min_value=1,
                        max_value=max_q,
                        value=st.session_state.topic_num_questions.get(topic, min(10, max_q)),
                        key=f"slider_{topic}"
                    )
                else:
                    # Automatikus eloszt√°s eset√©n megjelen√≠tj√ºk, hogy h√°ny k√©rd√©s lesz ebb≈ël a t√©m√°b√≥l
                    selected_topics_count = len([t for t in st.session_state.selected_topics if t in other_topics])
                    if selected_topics_count > 0:
                        questions_per_topic = total_questions // selected_topics_count
                        remaining_questions = total_questions % selected_topics_count
                        topic_index = list([t for t in st.session_state.selected_topics if t in other_topics]).index(topic)
                        current_questions = questions_per_topic + (1 if topic_index < remaining_questions else 0)
                        current_questions = min(current_questions, max_q)
                        st.info(f"üìä {current_questions} k√©rd√©s lesz ebb≈ël a t√©m√°b√≥l")
    
    if st.session_state.selected_topics:
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üöÄ Quiz ind√≠t√°sa", type="primary", use_container_width=True):
                start_quiz()
                st.rerun()

def show_quiz():
    if not st.session_state.quiz_questions:
        st.error("Nincsenek k√©rd√©sek!")
        return
    
    current_q = st.session_state.quiz_questions[st.session_state.current_question]
    
    # Progress bar
    progress = (st.session_state.current_question + 1) / len(st.session_state.quiz_questions)
    st.progress(progress)
    
    # Question counter
    st.markdown(f"**K√©rd√©s {st.session_state.current_question + 1} / {len(st.session_state.quiz_questions)}**")
    
    # Score display
    correct_answers = st.session_state.score
    incorrect_answers = st.session_state.current_question - correct_answers
    st.markdown(f'<div class="score-display">Pontsz√°m: {correct_answers} / {st.session_state.current_question} (‚úÖ {correct_answers} helyes, ‚ùå {incorrect_answers} hib√°s)</div>', 
                unsafe_allow_html=True)
    
    # Question
    st.markdown(f'<div class="question-text">{current_q["question"]}</div>', unsafe_allow_html=True)
    
    # Logo image if available (for sport logos)
    if "logo_path" in current_q and current_q["logo_path"]:
        try:
            # Adjust path to be relative to the quiz app directory
            logo_path = current_q["logo_path"]
            if logo_path.startswith("../"):
                # Get the current working directory and go up one level
                current_dir = os.path.dirname(os.path.abspath(__file__))
                parent_dir = os.path.dirname(current_dir)
                logo_path = os.path.join(parent_dir, logo_path[3:])
            
            # Check if file exists
            if os.path.exists(logo_path):
                # Center the logo using columns
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    st.image(logo_path, width=400, caption="Csapat log√≥")
            else:
                st.warning(f"Log√≥ k√©p nem tal√°lhat√≥: {logo_path}")
        except Exception as e:
            st.warning(f"Hiba a log√≥ bet√∂lt√©sekor: {e}")
    
    # Spotify embed if available
    if "spotify_embed" in current_q and current_q["spotify_embed"]:
        
        spotify_url = current_q["spotify_embed"]
        # Clean up the URL and add autoplay with better parameters
        if "?theme=black" in spotify_url:
            spotify_url = spotify_url.split("?theme=black")[0] + "?theme=black&size=small&hide_cover=1&hide_artist=1&hide_title=1&autoplay=1&muted=0"
        else:
            spotify_url = spotify_url + "?autoplay=1&muted=0"
        
        # Add JavaScript for better autoplay support
        st.markdown(f"""
        <script>
        window.addEventListener('load', function() {{
            const iframe = document.querySelector('iframe[src*="spotify"]');
            if (iframe) {{
                iframe.addEventListener('load', function() {{
                    // Try to trigger play
                    iframe.contentWindow.postMessage({{command: 'play'}}, '*');
                }});
            }}
        }});
        </script>
        """, unsafe_allow_html=True)
        
        st.components.v1.iframe(spotify_url, height=80)
    
    # Check if this is a text input question (idi√≥ta szavak)
    if current_q.get("question_type") == "text_input":
        # Text input for idi√≥ta szavak
        user_answer = st.text_input(
            "√çrd be a v√°laszod:",
            key=f"text_input_{st.session_state.current_question}",
            placeholder="√çrd ide a v√°laszod..."
        )
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚è≠Ô∏è Kihagy√°s", key=f"skip_{st.session_state.current_question}"):
                # Skip this question
                st.session_state.answers.append({
                    'question': current_q["question"],
                    'user_answer': "Kihagyva",
                    'correct_answer': current_q["correct_answer"],
                    'is_correct': False,
                    'explanation': current_q.get("explanation", "")
                })
                
                if st.session_state.current_question + 1 < len(st.session_state.quiz_questions):
                    st.session_state.current_question += 1
                    st.rerun()
                else:
                    st.session_state.quiz_state = 'results'
                    st.rerun()
        
        with col2:
            if st.button("‚úÖ V√°lasz bek√ºld√©se", key=f"submit_{st.session_state.current_question}"):
                if user_answer.strip():
                    # Simple text similarity check (case insensitive)
                    user_lower = user_answer.lower().strip()
                    correct_lower = current_q["correct_answer"].lower().strip()
                    
                    # Check if the answer contains key words from the correct answer
                    correct_words = correct_lower.split()
                    user_words = user_lower.split()
                    
                    # Count matching words
                    matching_words = sum(1 for word in correct_words if any(user_word in word or word in user_word for user_word in user_words))
                    similarity = matching_words / len(correct_words) if correct_words else 0
                    
                    is_correct = similarity >= 0.3  # 30% similarity threshold
                    
                    if is_correct:
                        st.session_state.score += 1
                    
                    st.session_state.answers.append({
                        'question': current_q["question"],
                        'user_answer': user_answer,
                        'correct_answer': current_q["correct_answer"],
                        'is_correct': is_correct,
                        'explanation': current_q.get("explanation", "")
                    })
                    
                    if st.session_state.current_question + 1 < len(st.session_state.quiz_questions):
                        st.session_state.current_question += 1
                        st.rerun()
                    else:
                        st.session_state.quiz_state = 'results'
                        st.rerun()
                else:
                    st.warning("K√©rlek √≠rj be egy v√°laszt!")
    
    else:
        # Multiple choice questions (existing logic)
        # Randomize options
        if 'current_options' not in st.session_state or st.session_state.current_question != st.session_state.get('last_question_index', -1):
            options = list(enumerate(current_q["options"]))
            random.shuffle(options)
            st.session_state.current_options = options
            st.session_state.last_question_index = st.session_state.current_question
            # Create mapping from new index to original index
            st.session_state.correct_answer_mapping = {new_idx: original_idx for new_idx, (original_idx, _) in enumerate(options)}
            # Create reverse mapping from original index to new index
            st.session_state.original_to_new_mapping = {original_idx: new_idx for new_idx, (original_idx, _) in enumerate(options)}
            # Reset selected answer for new question
            st.session_state.selected_answer = None
        
        # Options - direct answer selection
        for i, (original_idx, option_text) in enumerate(st.session_state.current_options):
            if st.button(
                option_text,
                key=f"option_{i}",
                use_container_width=True,
                type="primary" if st.session_state.selected_answer == i else "secondary"
            ):
                # Check answer using the reverse mapping
                correct_new_idx = st.session_state.original_to_new_mapping[current_q["correct"]]
                is_correct = i == correct_new_idx
                if is_correct:
                    st.session_state.score += 1
                
                # Store answer with original indices and current options
                st.session_state.answers.append({
                    'question': current_q["question"],
                    'user_answer': original_idx,
                    'user_selected_option': option_text,  # Store the actual selected option text
                    'correct_answer': current_q["correct"],
                    'is_correct': is_correct,
                    'explanation': current_q.get("explanation", ""),
                    'current_options': [opt[1] for opt in st.session_state.current_options],
                    'correct_new_idx': correct_new_idx
                })
                
                # Next question or finish
                if st.session_state.current_question + 1 < len(st.session_state.quiz_questions):
                    st.session_state.current_question += 1
                    st.session_state.selected_answer = None
                    st.rerun()
                else:
                    st.session_state.quiz_state = 'results'
                    st.rerun()

def show_results():
    st.markdown("## üéâ Quiz befejezve!")
    
    total_questions = len(st.session_state.quiz_questions)
    correct_answers = st.session_state.score
    percentage = (correct_answers / total_questions) * 100
    
    # Final score
    st.markdown(f'<div class="score-display">V√©gs≈ë pontsz√°m: {correct_answers} / {total_questions} ({percentage:.1f}%)</div>', 
                unsafe_allow_html=True)
    
    # Performance message
    if percentage >= 90:
        st.success("üèÜ Kiv√°l√≥ teljes√≠tm√©ny!")
    elif percentage >= 80:
        st.success("üéØ Nagyon j√≥!")
    elif percentage >= 70:
        st.info("üëç J√≥ teljes√≠tm√©ny!")
    elif percentage >= 60:
        st.warning("‚ö†Ô∏è √Åtlagos teljes√≠tm√©ny")
    else:
        st.error("üìö M√©g gyakorolni kell!")
    
    # Detailed results
    st.markdown("## üìä R√©szletes eredm√©nyek")
    
    for i, answer in enumerate(st.session_state.answers):
        # Add emoji to show if answer was correct
        status_emoji = "‚úÖ" if answer['is_correct'] else "‚ùå"
        with st.expander(f"{status_emoji} K√©rd√©s {i+1}: {answer['question'][:50]}..."):
            st.write(f"**K√©rd√©s:** {answer['question']}")
            
            # Check if this was a text input question
            if isinstance(answer['user_answer'], str) and answer['user_answer'] != "Kihagyva":
                # Text input question
                st.write(f"**Te v√°laszod:** {answer['user_answer']}")
                st.write(f"**Helyes v√°lasz:** {answer['correct_answer']}")
            elif answer['user_answer'] == "Kihagyva":
                # Skipped question
                st.write("**Te v√°laszod:** Kihagyva")
                st.write(f"**Helyes v√°lasz:** {answer['correct_answer']}")
            else:
                # Multiple choice question - use stored current options
                if 'current_options' in answer and 'correct_new_idx' in answer and 'user_selected_option' in answer:
                    # Use the stored current options (shuffled order)
                    current_options = answer['current_options']
                    correct_new_idx = answer['correct_new_idx']
                    user_selected_option = answer['user_selected_option']
                    
                    # Show user's selected answer
                    st.write(f"**Te v√°laszod:** {user_selected_option}")
                    
                    # Show all options with correct/incorrect marks
                    for j, option in enumerate(current_options):
                        if j == correct_new_idx and option == user_selected_option:
                            st.write(f"‚úÖ **{option}** (helyes v√°lasz)")
                        elif j == correct_new_idx:
                            st.write(f"‚úÖ **{option}** (helyes v√°lasz)")
                        elif option == user_selected_option:
                            st.write(f"‚ùå **{option}** (te v√°lasztottad)")
                        else:
                            st.write(f"‚Ä¢ {option}")
                else:
                    # Fallback if stored options not available
                    st.write(f"**Te v√°laszod:** {answer['user_answer']}")
                    st.write(f"**Helyes v√°lasz:** {answer['correct_answer']}")
            
            if answer.get("explanation"):
                st.info(f"**Magyar√°zat:** {answer['explanation']}")
    
    # Restart button
    if st.button("üîÑ √öj quiz", type="primary"):
        reset_quiz()
        st.rerun()

if __name__ == "__main__":
    main() 