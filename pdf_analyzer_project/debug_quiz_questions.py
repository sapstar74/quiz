#!/usr/bin/env python3
"""
Debug script a quiz k√©rd√©sek √©s √©rt√©kel√©s ellen≈ërz√©s√©hez
"""

from topics.foldrajz import FOLDRAJZ_QUESTIONS
from classical_music_questions_tschaikovsky_updated import CLASSICAL_MUSIC_QUESTIONS as ZENEK_QUESTIONS
from topics.tudosok import TUDOSOK_QUESTIONS
from topics.mitologia_all_questions import MITOLOGIA_QUESTIONS_ALL
from topics.haboru_all_questions import HABORU_QUESTIONS_ALL
from topics.kiralyok import KIRALYOK_QUESTIONS
from topics.allatok_balanced import ALLATOK_QUESTIONS_BALANCED
from topics.dramak import DRAMAK_QUESTIONS
from topics.sport_logok import SPORT_LOGOK_QUESTIONS
from topics.zaszlok_all_questions import ZASZLOK_QUESTIONS_ALL
from topics.magyar_zenekarok import MAGYAR_ZENEKAROK_QUESTIONS
from topics.nemzetkozi_zenekarok import NEMZETKOZI_ZENEKAROK_QUESTIONS
from topics.idiota_szavak_reversed import IDIOTA_SZAVAK_QUESTIONS

# Quiz adatok t√©mak√∂r√∂k szerint csoportos√≠tva
QUIZ_DATA_BY_TOPIC = {
    "f√∂ldrajz": FOLDRAJZ_QUESTIONS,
    "komolyzene": ZENEK_QUESTIONS,
    "magyar_zenekarok": MAGYAR_ZENEKAROK_QUESTIONS,
    "nemzetkozi_zenekarok": NEMZETKOZI_ZENEKAROK_QUESTIONS,
    "h√°bor√∫k": HABORU_QUESTIONS_ALL,
    "magyar_kir√°lyok": KIRALYOK_QUESTIONS,
    "tud√≥sok": TUDOSOK_QUESTIONS,
    "mitol√≥gia": MITOLOGIA_QUESTIONS_ALL,
    "√°llatok": ALLATOK_QUESTIONS_BALANCED,
    "dr√°m√°k": DRAMAK_QUESTIONS,
    "sport_log√≥k": SPORT_LOGOK_QUESTIONS,
    "z√°szl√≥k": ZASZLOK_QUESTIONS_ALL,
    "idi√≥ta_szavak": IDIOTA_SZAVAK_QUESTIONS,
}

def check_question_structure():
    """Ellen≈ërzi a k√©rd√©sek strukt√∫r√°j√°t"""
    
    print("üîç Quiz k√©rd√©sek strukt√∫ra ellen≈ërz√©se...")
    print("=" * 60)
    
    for topic, questions in QUIZ_DATA_BY_TOPIC.items():
        print(f"\nüìö T√©mak√∂r: {topic}")
        print(f"   K√©rd√©sek sz√°ma: {len(questions)}")
        
        if questions:
            # Ellen≈ërizz√ºk az els≈ë k√©rd√©s strukt√∫r√°j√°t
            first_q = questions[0]
            print(f"   Els≈ë k√©rd√©s mez≈ëi: {list(first_q.keys())}")
            
            # Ellen≈ërizz√ºk a k√∂telez≈ë mez≈ëket
            required_fields = ["question", "options", "correct", "explanation", "topic"]
            missing_fields = []
            
            for field in required_fields:
                if field not in first_q:
                    missing_fields.append(field)
            
            if missing_fields:
                print(f"   ‚ö†Ô∏è  Hi√°nyz√≥ mez≈ëk: {missing_fields}")
            else:
                print(f"   ‚úÖ Minden k√∂telez≈ë mez≈ë megtal√°lhat√≥")
            
            # Ellen≈ërizz√ºk a correct mez≈ë √©rt√©k√©t
            correct_idx = first_q["correct"]
            options_count = len(first_q["options"])
            
            if isinstance(correct_idx, int) and 0 <= correct_idx < options_count:
                print(f"   ‚úÖ Correct index helyes: {correct_idx} (0-{options_count-1} tartom√°nyban)")
            else:
                print(f"   ‚ùå Correct index hib√°s: {correct_idx} (0-{options_count-1} tartom√°nyban kellene lennie)")
            
            # Ellen≈ërizz√ºk a v√°laszlehet≈ës√©geket
            print(f"   V√°laszlehet≈ës√©gek sz√°ma: {options_count}")
            for i, option in enumerate(first_q["options"]):
                marker = "‚úÖ" if i == correct_idx else "  "
                print(f"   {marker} {i}: {option}")

def simulate_quiz_scoring():
    """Szimul√°l egy quiz-t az √©rt√©kel√©s tesztel√©s√©hez"""
    
    print("\nüéØ Quiz √©rt√©kel√©s szimul√°ci√≥...")
    print("=" * 60)
    
    # V√°lasszunk ki egy t√©mak√∂rt tesztel√©shez
    test_topic = "magyar_zenekarok"
    questions = QUIZ_DATA_BY_TOPIC[test_topic]
    
    print(f"üìö Teszt t√©mak√∂r: {test_topic}")
    print(f"   K√©rd√©sek sz√°ma: {len(questions)}")
    
    # V√°lasszunk ki 5 v√©letlenszer≈± k√©rd√©st
    import random
    test_questions = random.sample(questions, min(5, len(questions)))
    
    print(f"\nüß™ Tesztel√©s 5 k√©rd√©ssel:")
    
    score = 0
    total_questions = len(test_questions)
    
    for i, q in enumerate(test_questions):
        print(f"\n   K√©rd√©s {i+1}: {q['question']}")
        print(f"   V√°laszlehet≈ës√©gek:")
        
        for j, option in enumerate(q["options"]):
            marker = "‚úÖ" if j == q["correct"] else "  "
            print(f"   {marker} {j}: {option}")
        
        # Szimul√°ljunk egy helyes v√°laszt
        user_answer = q["correct"]  # Mindig helyes v√°lasz
        is_correct = user_answer == q["correct"]
        
        if is_correct:
            score += 1
            print(f"   ‚úÖ Helyes v√°lasz! Pontsz√°m: {score}/{i+1}")
        else:
            print(f"   ‚ùå Hib√°s v√°lasz! Pontsz√°m: {score}/{i+1}")
    
    percentage = (score / total_questions) * 100
    print(f"\nüéâ V√©gs≈ë eredm√©ny: {score}/{total_questions} ({percentage:.1f}%)")
    
    if percentage >= 90:
        print("üèÜ Kiv√°l√≥ teljes√≠tm√©ny!")
    elif percentage >= 80:
        print("üéØ Nagyon j√≥!")
    elif percentage >= 70:
        print("üëç J√≥ teljes√≠tm√©ny!")
    elif percentage >= 60:
        print("‚ö†Ô∏è √Åtlagos teljes√≠tm√©ny")
    else:
        print("üìö M√©g gyakorolni kell!")

def check_specific_issues():
    """Ellen≈ërzi specifikus probl√©m√°kat"""
    
    print("\nüîß Specifikus probl√©m√°k ellen≈ërz√©se...")
    print("=" * 60)
    
    # Ellen≈ërizz√ºk, hogy minden k√©rd√©snek van-e correct mez≈ëje
    for topic, questions in QUIZ_DATA_BY_TOPIC.items():
        print(f"\nüìö {topic}:")
        
        for i, q in enumerate(questions):
            if "correct" not in q:
                print(f"   ‚ùå K√©rd√©s {i+1}: Nincs 'correct' mez≈ë")
            elif not isinstance(q["correct"], int):
                print(f"   ‚ùå K√©rd√©s {i+1}: 'correct' nem sz√°m: {q['correct']}")
            elif q["correct"] < 0 or q["correct"] >= len(q["options"]):
                print(f"   ‚ùå K√©rd√©s {i+1}: 'correct' index k√≠v√ºl esik a tartom√°nyon: {q['correct']} (0-{len(q['options'])-1})")

if __name__ == "__main__":
    check_question_structure()
    simulate_quiz_scoring()
    check_specific_issues()
    
    print("\nüéâ Debug ellen≈ërz√©s befejezve!") 