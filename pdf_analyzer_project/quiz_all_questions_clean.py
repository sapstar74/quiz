import streamlit as st
import random

# Import√°ljuk a val√≥di k√©rd√©sf√°jlokat
try:
    from topics.haboru_all_questions import HABORU_QUESTIONS_ALL
    from topics.kiralyok import KIRALYOK_QUESTIONS
    from topics.foldrajz import FOLDRAJZ_QUESTIONS
    from topics.mitologia_all_questions import MITOLOGIA_QUESTIONS_ALL
    from topics.allatok_all_questions import ALLATOK_QUESTIONS_ALL
    from topics.sport_logok import SPORT_LOGOK_QUESTIONS
    from topics.zaszlok_all_questions import ZASZLOK_QUESTIONS_ALL
    from topics.dramak import DRAMAK_QUESTIONS
    from topics.tudosok import TUDOSOK_QUESTIONS
    from topics.zenek import ZENEK_QUESTIONS
except ImportError as e:
    st.error(f"Hiba a k√©rd√©sf√°jlok bet√∂lt√©sekor: {e}")
    st.stop()

st.set_page_config(
    page_title="üß† Teljes Quiz App",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Val√≥di k√©rd√©sbank a k√ºl√∂n f√°jlokb√≥l ---
QUIZ_DATA_BY_TOPIC = {
    "f√∂ldrajz": FOLDRAJZ_QUESTIONS,
    "komolyzene": ZENEK_QUESTIONS,
    "tud√≥sok": TUDOSOK_QUESTIONS,
    "mitol√≥gia": MITOLOGIA_QUESTIONS_ALL,
    "√°llatok": ALLATOK_QUESTIONS_ALL,
    "sport_log√≥k": SPORT_LOGOK_QUESTIONS,
    "vil√°gz√°szl√≥k": ZASZLOK_QUESTIONS_ALL,
    "magyar_kir√°lyok": KIRALYOK_QUESTIONS,
    "h√°bor√∫k": HABORU_QUESTIONS_ALL,
    "dr√°m√°k": DRAMAK_QUESTIONS
}

# --- T√©mak√∂r√∂k √©s log√≥k - sz√©p szelekci√≥s k√©perny≈ë ---
TOPICS_WITH_LOGOS = {
    "f√∂ldrajz": {
        "name": "üåç F√∂ldrajz",
        "description": "Orsz√°gok, v√°rosok, term√©szeti adotts√°gok",
        "logo": "üåç",
        "color": "#4CAF50",
        "questions": len(QUIZ_DATA_BY_TOPIC["f√∂ldrajz"])
    },
    "komolyzene": {
        "name": "üéº Komolyzene",
        "description": "Zenem≈±vek, zeneszerz≈ëk, Spotify hallgat√°s",
        "logo": "üéº",
        "color": "#9C27B0",
        "questions": len(QUIZ_DATA_BY_TOPIC["komolyzene"])
    },
    "tud√≥sok": {
        "name": "üî¨ Tud√≥sok",
        "description": "H√≠res tud√≥sok √©s felfedez√©sek",
        "logo": "üî¨",
        "color": "#FF9800",
        "questions": len(QUIZ_DATA_BY_TOPIC["tud√≥sok"])
    },
    "mitol√≥gia": {
        "name": "üèõÔ∏è Mitol√≥gia",
        "description": "G√∂r√∂g, r√≥mai √©s √©szaki istenek, h≈ës√∂k",
        "logo": "üèõÔ∏è",
        "color": "#795548",
        "questions": len(QUIZ_DATA_BY_TOPIC["mitol√≥gia"])
    },
    "√°llatok": {
        "name": "ü¶Å K√ºl√∂nleges √Ållatok",
        "description": "Ritka √©s egzotikus √°llatok",
        "logo": "ü¶Å",
        "color": "#FF5722",
        "questions": len(QUIZ_DATA_BY_TOPIC["√°llatok"])
    },
    "sport_log√≥k": {
        "name": "üèÜ Sport Log√≥k",
        "description": "NFL, NBA, MLB, NHL csapatok",
        "logo": "üèÜ",
        "color": "#2196F3",
        "questions": len(QUIZ_DATA_BY_TOPIC["sport_log√≥k"])
    },
    "vil√°gz√°szl√≥k": {
        "name": "üè≥Ô∏è Vil√°gz√°szl√≥k",
        "description": "Orsz√°gok z√°szlainak felismer√©se",
        "logo": "üè≥Ô∏è",
        "color": "#E91E63",
        "questions": len(QUIZ_DATA_BY_TOPIC["vil√°gz√°szl√≥k"])
    },
    "magyar_kir√°lyok": {
        "name": "üëë Magyar Kir√°lyok",
        "description": "Magyar kir√°lyok √©vsz√°mokkal",
        "logo": "üëë",
        "color": "#FFC107",
        "questions": len(QUIZ_DATA_BY_TOPIC["magyar_kir√°lyok"])
    },
    "h√°bor√∫k": {
        "name": "‚öîÔ∏è H√°bor√∫k", 
        "description": "T√∂rt√©nelmi konfliktusok √©s csat√°k",
        "logo": "‚öîÔ∏è",
        "color": "#F44336",
        "questions": len(QUIZ_DATA_BY_TOPIC["h√°bor√∫k"])
    },
    "dr√°m√°k": {
        "name": "üé≠ Dr√°m√°k",
        "description": "Shakespeare √©s Csehov dr√°m√°k",
        "logo": "üé≠",
        "color": "#673AB7",
        "questions": len(QUIZ_DATA_BY_TOPIC["dr√°m√°k"])
    }
}

# --- Session state inicializ√°l√°s ---
if 'selected_topics' not in st.session_state:
    st.session_state.selected_topics = []
if 'quiz_started' not in st.session_state:
    st.session_state.quiz_started = False
if 'questions' not in st.session_state:
    st.session_state.questions = []
if 'current_question' not in st.session_state:
    st.session_state.current_question = 0
if 'score' not in st.session_state:
    st.session_state.score = 0
if 'answers' not in st.session_state:
    st.session_state.answers = []

# --- F≈ë tartalom ---
st.title("üß† Teljes Quiz App")
st.markdown("---")

# Statisztik√°k megjelen√≠t√©se
st.sidebar.header("üìä K√©rd√©sbank Statisztik√°k")
total_questions = sum(len(questions) for questions in QUIZ_DATA_BY_TOPIC.values())
st.sidebar.metric("üìù √ñsszes k√©rd√©s", total_questions)
st.sidebar.metric("üéØ T√©mak√∂r√∂k", len(QUIZ_DATA_BY_TOPIC))

for topic, questions in QUIZ_DATA_BY_TOPIC.items():
    topic_name = TOPICS_WITH_LOGOS[topic]["name"]
    st.sidebar.metric(topic_name, len(questions))

if not st.session_state.quiz_started:
    # --- Sz√©p szelekci√≥s k√©perny≈ë ---
    st.header("üéØ V√°lassz t√©mak√∂r√∂ket a kv√≠zhez!")
    
    # K√©rd√©sek sz√°ma be√°ll√≠t√°sa
    col1, col2 = st.columns([2, 1])
    with col2:
        st.subheader("‚öôÔ∏è Be√°ll√≠t√°sok")
        num_questions = st.slider("üìù K√©rd√©sek sz√°ma:", 5, 50, 15)
    
    with col1:
        st.subheader("üìö El√©rhet≈ë t√©mak√∂r√∂k")
    
    # T√©mak√∂r√∂k megjelen√≠t√©se checkboxokkal
    selected_topics = []
    
    # 3 oszlopos elrendez√©s
    cols = st.columns(3)
    if 'selected_topics_temp' not in st.session_state:
        st.session_state.selected_topics_temp = []
    for i, (topic_key, topic_info) in enumerate(TOPICS_WITH_LOGOS.items()):
        col_idx = i % 3
        selected = topic_key in st.session_state.selected_topics_temp
        with cols[col_idx]:
            # Teljes t√©glalap kattinthat√≥
            button_text = f"{topic_info['logo']} {topic_info['name']}\n{topic_info['description']}\nüìä {topic_info['questions']} k√©rd√©s"
            if st.button(
                button_text,
                key=f"btn_{topic_key}",
                help=f"{topic_info['description']} - {topic_info['questions']} k√©rd√©s",
                use_container_width=True,
                type="secondary" if not selected else "primary"
            ):
                if selected:
                    st.session_state.selected_topics_temp.remove(topic_key)
                else:
                    st.session_state.selected_topics_temp.append(topic_key)
                st.rerun()
    
    # Kv√≠z ind√≠t√°sa gomb
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üöÄ Kv√≠z ind√≠t√°sa", type="primary", use_container_width=True):
            if st.session_state.selected_topics_temp:
                st.session_state.selected_topics = st.session_state.selected_topics_temp.copy()
                # K√©rd√©sek √∂sszegy≈±jt√©se
                questions = []
                for topic in st.session_state.selected_topics:
                    questions.extend(QUIZ_DATA_BY_TOPIC[topic])
                random.shuffle(questions)
                st.session_state.questions = questions[:num_questions]
                st.session_state.quiz_started = True
                st.session_state.current_question = 0
                st.session_state.score = 0
                st.session_state.answers = []
                st.session_state.selected_topics_temp = []
                st.rerun()
            else:
                st.warning("‚ö†Ô∏è V√°lassz legal√°bb egy t√©mak√∂rt!")
        
        # Reset gomb
        if st.button("üîÑ Alaphelyzet", use_container_width=True):
            st.session_state.selected_topics = []
            st.session_state.selected_topics_temp = []
            st.session_state.quiz_started = False
            st.session_state.questions = []
            st.session_state.current_question = 0
            st.session_state.score = 0
            st.session_state.answers = []
            st.rerun()

else:
    # --- Kv√≠z k√©perny≈ë ---
    qn = st.session_state.current_question
    questions = st.session_state.questions
    
    if qn < len(questions):
        q = questions[qn]
        
        # Progress bar
        progress = (qn + 1) / len(questions)
        st.progress(progress)
        st.write(f"**{qn+1} / {len(questions)}** k√©rd√©s")
        
        st.header(f"‚ùì {q['question']}")
        # --- Zenei embed ---
        if 'spotify' in q:
            st.markdown(f'<iframe src="{q["spotify"]}" width="100%" height="80" frameborder="0" allowtransparency="true" allow="encrypted-media"></iframe>', unsafe_allow_html=True)
        if 'youtube' in q:
            st.markdown(f'<iframe width="100%" height="315" src="{q["youtube"]}" frameborder="0" allowfullscreen></iframe>', unsafe_allow_html=True)
        
        options = q["options"]
        answer = st.radio("V√°laszlehet≈ës√©gek:", options, key=f"q{qn}")
        
        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("‚úÖ V√°lasz bek√ºld√©se", key=f"submit{qn}", type="primary"):
                correct = options[q["correct"]]
                st.session_state.answers.append(answer)
                if answer == correct:
                    st.session_state.score += 1
                    st.success("üéâ Helyes v√°lasz!")
                else:
                    st.error(f"‚ùå Helytelen! A helyes v√°lasz: **{correct}**")
                    if "explanation" in q:
                        st.info(f"üí° **Magyar√°zat:** {q['explanation']}")
                # --- √ñsszefoglal√≥ ---
                helyes = st.session_state.score
                rossz = len(st.session_state.answers) - helyes
                st.info(f"**Eddigi eredm√©ny:** {helyes} helyes, {rossz} helytelen v√°lasz")
                st.session_state.current_question += 1
                st.rerun()
        
        with col2:
            if st.button("üîÑ K√∂vetkez≈ë k√©rd√©s", key=f"next{qn}"):
                st.session_state.current_question += 1
                st.rerun()
    else:
        # Kv√≠z v√©ge
        st.success("üéä **Kv√≠z v√©ge!**")
        st.balloons()
        
        score_percent = (st.session_state.score / len(questions)) * 100
        st.metric("üìä Pontsz√°m", f"{st.session_state.score} / {len(questions)} ({score_percent:.1f}%)")
        
        if score_percent >= 80:
            st.success("üèÜ Kiv√°l√≥ teljes√≠tm√©ny!")
        elif score_percent >= 60:
            st.info("üëç J√≥ teljes√≠tm√©ny!")
        else:
            st.warning("üìö M√©g van mit tanulni!")
        
        # --- R√©szletes √©rt√©kel√©s ---
        st.markdown("---")
        st.subheader("üìã R√©szletes √©rt√©kel√©s")
        for idx, (q, user_ans) in enumerate(zip(st.session_state.questions, st.session_state.answers)):
            correct_ans = q["options"][q["correct"]]
            helyes = (user_ans == correct_ans)
            color = "#d4edda" if helyes else "#f8d7da"
            border = "#28a745" if helyes else "#dc3545"
            st.markdown(f"""
            <div style='border:2px solid {border}; border-radius:10px; background:{color}; padding:12px; margin-bottom:10px;'>
                <b>{idx+1}. {q['question']}</b><br>
                <span style='color: {'green' if helyes else 'red'}; font-weight:bold;'>
                    {'‚úîÔ∏è' if helyes else '‚ùå'} V√°laszod: {user_ans}
                </span><br>
                <span style='color:#333;'>Helyes v√°lasz: <b>{correct_ans}</b></span><br>
                {('<span style="color:#888;">üí° ' + q['explanation'] + '</span>') if 'explanation' in q else ''}
            </div>
            """, unsafe_allow_html=True)
        if st.button("üîÑ √öj kv√≠z", type="primary"):
            st.session_state.quiz_started = False
            st.session_state.questions = []
            st.session_state.current_question = 0
            st.session_state.score = 0
            st.session_state.answers = []
            st.rerun() 