#!/usr/bin/env python3
"""
Magyar zenekarok Spotify linkjeinek keres√©se
"""

import requests
import json
import time
import re
from urllib.parse import quote

def search_spotify_artist(artist_name):
    """Spotify API keres√©s magyar zenekarokra"""
    
    # Magyar zenekarok specifikus keres√©si felt√©telek
    search_terms = [
        f"{artist_name} magyar",
        f"{artist_name} hungary",
        f"{artist_name} budapest",
        f"{artist_name} magyarorsz√°g",
        artist_name
    ]
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }
    
    for search_term in search_terms:
        try:
            # Spotify web search
            encoded_term = quote(search_term)
            url = f"https://open.spotify.com/search/{encoded_term}/artists"
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                # Extract artist ID from response
                content = response.text
                
                # Look for artist URLs in the page
                artist_patterns = [
                    r'https://open\.spotify\.com/artist/([a-zA-Z0-9]+)',
                    r'/artist/([a-zA-Z0-9]{22})',
                    r'"uri":"spotify:artist:([a-zA-Z0-9]{22})"'
                ]
                
                for pattern in artist_patterns:
                    matches = re.findall(pattern, content)
                    if matches:
                        artist_id = matches[0]
                        return f"https://open.spotify.com/artist/{artist_id}"
            
            time.sleep(1)  # Rate limiting
            
        except Exception as e:
            print(f"‚ùå Hiba a keres√©s sor√°n ({search_term}): {e}")
            continue
    
    return None

def search_spotify_web_api(artist_name):
    """Spotify Web API keres√©s"""
    
    # Known Hungarian band mappings
    hungarian_bands = {
        "Hiperkarma": "Hiperkarma",
        "HS7": "HS7",
        "√ìri√°s": "√ìri√°s",
        "Kisp√°l": "Kisp√°l √©s a Borz",
        "Kiscsillag": "Kiscsillag",
        "Vad Fruttik": "Vad Fruttik",
        "Tereskova": "Tereskova",
        "Anna and the Barbies": "Anna and the Barbies",
        "Honeybeast": "Honeybeast",
        "Konyha": "Konyha",
        "Follow the flow": "Follow the Flow",
        "Elef√°nt": "Elef√°nt",
        "4Street": "4Street",
        "Bagossy Brothers": "Bagossy Brothers Company",
        "Csaknekedkisl√°ny": "Csaknekedkisl√°ny",
        "L√≥ci j√°tszik": "L√≥ci j√°tszik",
        "Galaxisok": "Galaxisok",
        "Parno Graszt": "Parno Graszt",
        "Palya Bea": "Bea Palya",
        "Bohemian Betyars": "Bohemian Betyars",
        "Aurevoir": "Aurevoir",
        "D√°nielffy": "D√°nielffy",
        "Ham Ko Ham": "Ham Ko Ham",
        "Carbonfools": "Carbonfools",
        "Zagar": "Zagar",
        "Neo": "Neo",
        "Soulwave": "Soulwave",
        "Neon": "Neon"
    }
    
    # Try exact name first
    search_name = hungarian_bands.get(artist_name, artist_name)
    
    try:
        # Use Spotify's search endpoint
        encoded_name = quote(search_name)
        url = f"https://open.spotify.com/search/{encoded_name}/artists"
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        
        if response.status_code == 200:
            content = response.text
            
            # Look for artist links
            artist_links = re.findall(r'https://open\.spotify\.com/artist/([a-zA-Z0-9]{22})', content)
            
            if artist_links:
                # Return the first found artist
                return f"https://open.spotify.com/artist/{artist_links[0]}"
        
        # If not found, try with "magyar" suffix
        if "magyar" not in search_name.lower():
            magyar_url = f"https://open.spotify.com/search/{quote(search_name + ' magyar')}/artists"
            response = requests.get(magyar_url, headers=headers, timeout=15)
            
            if response.status_code == 200:
                content = response.text
                artist_links = re.findall(r'https://open\.spotify\.com/artist/([a-zA-Z0-9]{22})', content)
                
                if artist_links:
                    return f"https://open.spotify.com/artist/{artist_links[0]}"
    
    except Exception as e:
        print(f"‚ùå API hiba ({artist_name}): {e}")
    
    return None

def main():
    print("üéµ Magyar zenekarok Spotify linkjeinek keres√©se...")
    print("‚è≥ Ez eltarthat n√©h√°ny percig...")
    
    # Magyar zenekarok list√°ja
    magyar_zenekarok = [
        "Hiperkarma", "HS7", "√ìri√°s", "Kisp√°l", "Kiscsillag", "Vad Fruttik",
        "Tereskova", "Anna and the Barbies", "Honeybeast", "Konyha",
        "Follow the flow", "Elef√°nt", "4Street", "Bagossy Brothers",
        "Csaknekedkisl√°ny", "L√≥ci j√°tszik", "Galaxisok", "Parno Graszt",
        "Palya Bea", "Bohemian Betyars", "Aurevoir", "D√°nielffy",
        "Ham Ko Ham", "Carbonfools", "Zagar", "Neo", "Soulwave", "Neon"
    ]
    
    results = {}
    success_count = 0
    fallback_count = 0
    
    print(f"üîç Magyar zenekarok Spotify linkjeinek keres√©se...")
    print(f"üìã √ñsszesen {len(magyar_zenekarok)} zenekar")
    
    for i, zenekar in enumerate(magyar_zenekarok, 1):
        print(f"[{i}/{len(magyar_zenekarok)}] Keres√©s: {zenekar}")
        
        # Try improved search
        link = search_spotify_web_api(zenekar)
        
        if link and "0YqQvRjqNXAv2K5FqS9cdO" not in link:
            print(f"‚úÖ {zenekar}: {link}")
            results[zenekar] = link
            success_count += 1
        else:
            # Fallback link
            fallback_link = "https://open.spotify.com/artist/0YqQvRjqNXAv2K5FqS9cdO"
            print(f"‚ùå {zenekar}: Fallback link")
            results[zenekar] = fallback_link
            fallback_count += 1
        
        time.sleep(2)  # Rate limiting
    
    # Eredm√©nyek ment√©se
    with open('magyar_zenekarok_spotify_links.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    # Python f√°jl gener√°l√°sa
    python_code = "# Magyar zenekarok Spotify linkjei\n"
    python_code += "MAGYAR_ZENEKAROK_SPOTIFY_LINKS = {\n"
    
    for zenekar, link in results.items():
        python_code += f'    "{zenekar}": "{link}",\n'
    
    python_code += "}\n"
    
    with open('magyar_zenekarok_spotify_links.py', 'w', encoding='utf-8') as f:
        f.write(python_code)
    
    print(f"\nüìÅ Eredm√©nyek mentve: magyar_zenekarok_spotify_links.json")
    print(f"‚úÖ {success_count} val√≥di link tal√°lva")
    print(f"‚ùå {fallback_count} fallback link")
    print(f"üìÅ Python f√°jl l√©trehozva: magyar_zenekarok_spotify_links.py")
    print("üéâ Keres√©s befejezve!")
    
    print("\nüìä √ñsszefoglal√≥:")
    for zenekar, link in results.items():
        status = "‚úÖ" if "0YqQvRjqNXAv2K5FqS9cdO" not in link else "‚ùå"
        print(f"{status} {zenekar}: {link}")

if __name__ == "__main__":
    main() 