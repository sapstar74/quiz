"""
Demo script for PDF Analyzer
Creates a simple test PDF and demonstrates functionality
"""

from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from pathlib import Path
import tempfile

def create_demo_pdf():
    """Create a simple demo PDF for testing"""
    
    # Create demo directory
    demo_dir = Path("demo_files")
    demo_dir.mkdir(exist_ok=True)
    
    # Create PDF
    pdf_path = demo_dir / "demo_document.pdf"
    
    c = canvas.Canvas(str(pdf_path), pagesize=letter)
    
    # Page 1
    c.drawString(100, 750, "PDF Elemz≈ë Demo Dokumentum")
    c.drawString(100, 720, "=" * 40)
    c.drawString(100, 680, "Ez egy teszt dokumentum a PDF Elemz≈ë alkalmaz√°s sz√°m√°ra.")
    c.drawString(100, 650, "")
    c.drawString(100, 620, "F≈ëbb pontok:")
    c.drawString(120, 590, "‚Ä¢ Automatikus sz√∂veg kinyer√©s")
    c.drawString(120, 560, "‚Ä¢ Intelligens keres√©si funkci√≥k")
    c.drawString(120, 530, "‚Ä¢ AI-alap√∫ chat (fejleszt√©s alatt)")
    c.drawString(120, 500, "‚Ä¢ Statisztikai elemz√©sek")
    c.drawString(100, 450, "")
    c.drawString(100, 420, "Technol√≥gi√°k:")
    c.drawString(120, 390, "- Streamlit webes fel√ºlet")
    c.drawString(120, 360, "- PyPDF2 √©s pdfplumber k√∂nyvt√°rak")
    c.drawString(120, 330, "- Python backend")
    
    # Page 2
    c.showPage()
    c.drawString(100, 750, "M√°sodik oldal - Tov√°bbi inform√°ci√≥k")
    c.drawString(100, 720, "=" * 40)
    c.drawString(100, 680, "Ez a m√°sodik oldal tov√°bbi tesztadatokat tartalmaz.")
    c.drawString(100, 650, "")
    c.drawString(100, 620, "Keres√©si tesztek:")
    c.drawString(120, 590, "1. Keress r√° a 'technol√≥gi√°k' sz√≥ra")
    c.drawString(120, 560, "2. Pr√≥b√°ld ki a 'AI' keres√©st")
    c.drawString(120, 530, "3. N√©zd meg a statisztik√°kat")
    c.drawString(100, 480, "")
    c.drawString(100, 450, "J√∂v≈ëbeli funkci√≥k:")
    c.drawString(120, 420, "‚Ä¢ OpenAI GPT integr√°ci√≥")
    c.drawString(120, 390, "‚Ä¢ Fejlett szemantikai keres√©s")
    c.drawString(120, 360, "‚Ä¢ Automatikus √∂sszefoglal√≥")
    c.drawString(120, 330, "‚Ä¢ Export√°l√°si lehet≈ës√©gek")
    
    c.save()
    
    return pdf_path

def test_pdf_processor():
    """Test the PDF processor with demo file"""
    from src.pdf_processor import PDFProcessor
    
    # Create demo PDF
    pdf_path = create_demo_pdf()
    print(f"‚úÖ Demo PDF l√©trehozva: {pdf_path}")
    
    # Test processor
    processor = PDFProcessor()
    
    # Extract text
    print("\nüîç Sz√∂veg kinyer√©se...")
    text = processor.extract_text(pdf_path)
    print(f"Kinyert sz√∂veg hossza: {len(text)} karakter")
    print(f"Els≈ë 200 karakter: {text[:200]}...")
    
    # Get document info
    print("\nüìä Dokumentum inform√°ci√≥...")
    info = processor.get_document_info(pdf_path)
    for key, value in info.items():
        print(f"{key}: {value}")
    
    # Search test
    print("\nüîç Keres√©si teszt...")
    matches = processor.search_in_document(pdf_path, "technol√≥gi√°k")
    print(f"Tal√°latok 'technol√≥gi√°k' sz√≥ra: {len(matches)}")
    for match in matches:
        print(f"  - Oldal {match['page']}, Sor {match['line']}: {match['text'][:50]}...")

if __name__ == "__main__":
    print("üß† PDF Elemz≈ë Demo")
    print("=" * 30)
    
    try:
        test_pdf_processor()
        print("\n‚úÖ Demo sikeresen lefutott!")
        print("\nüåê Streamlit alkalmaz√°s: http://localhost:8504")
        print("üìÑ Demo PDF: demo_files/demo_document.pdf")
        
    except Exception as e:
        print(f"\n‚ùå Hiba: {e}")
        print("\nAz alkalmaz√°s m√©g fejleszt√©s alatt √°ll.") 