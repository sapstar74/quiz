#!/usr/bin/env python3
"""
üéµ Audio Let√∂lt≈ë Alkalmaz√°s
Streamlit alkalmaz√°s a Spotify linkekb≈ël val√≥ audio let√∂lt√©shez
"""

import streamlit as st
import os
from pathlib import Path
import time
from spotify_audio_downloader import SpotifyAudioDownloader

def main():
    st.set_page_config(
        page_title="Audio Let√∂lt≈ë",
        page_icon="üéµ",
        layout="wide"
    )
    
    st.title("üéµ Audio Let√∂lt≈ë Alkalmaz√°s")
    st.markdown("Ez az alkalmaz√°s let√∂lti az audio tartalmakat a Spotify linkekb≈ël.")
    
    # Audio k√∂nyvt√°r l√©trehoz√°sa
    audio_dir = Path(__file__).parent / "audio_files"
    audio_dir.mkdir(exist_ok=True)
    
    # Sidebar be√°ll√≠t√°sok
    st.sidebar.markdown("### ‚öôÔ∏è Be√°ll√≠t√°sok")
    
    # K√©rd√©sek bet√∂lt√©se
    st.sidebar.markdown("### üìö K√©rd√©sek Bet√∂lt√©se")
    
    if st.sidebar.button("üîÑ K√©rd√©sek Bet√∂lt√©se"):
        try:
            from topics.magyar_zenekarok import MAGYAR_ZENEKAROK_QUESTIONS
            from topics.nemzetkozi_zenekarok import NEMZETKOZI_ZENEKAROK_QUESTIONS
            from classical_music_questions_tschaikovsky_updated import CLASSICAL_MUSIC_QUESTIONS
            
            all_questions = (
                MAGYAR_ZENEKAROK_QUESTIONS + 
                NEMZETKOZI_ZENEKAROK_QUESTIONS + 
                CLASSICAL_MUSIC_QUESTIONS
            )
            
            st.session_state.all_questions = all_questions
            st.session_state.spotify_links = []
            
            for i, q in enumerate(all_questions):
                if 'spotify_embed' in q and q['spotify_embed']:
                    st.session_state.spotify_links.append({
                        'index': i,
                        'question': q['question'],
                        'explanation': q.get('explanation', ''),
                        'spotify_url': q['spotify_embed'],
                        'downloaded': False
                    })
            
            st.sidebar.success(f"‚úÖ {len(st.session_state.spotify_links)} Spotify link tal√°lva!")
            
        except Exception as e:
            st.sidebar.error(f"‚ùå Hiba a k√©rd√©sek bet√∂lt√©sekor: {e}")
    
    # F≈ë tartalom
    if 'spotify_links' in st.session_state:
        st.markdown(f"### üìã Tal√°lt Spotify Linkek: {len(st.session_state.spotify_links)}")
        
        # Let√∂lt√©si be√°ll√≠t√°sok
        col1, col2 = st.columns(2)
        
        with col1:
            max_downloads = st.number_input(
                "Maxim√°lis let√∂lt√©sek sz√°ma",
                min_value=1,
                max_value=len(st.session_state.spotify_links),
                value=min(10, len(st.session_state.spotify_links))
            )
        
        with col2:
            delay_seconds = st.number_input(
                "V√°rakoz√°s let√∂lt√©sek k√∂z√∂tt (m√°sodperc)",
                min_value=1,
                max_value=10,
                value=2
            )
        
        # Let√∂lt√©s ind√≠t√°sa
        if st.button("üöÄ Let√∂lt√©s Ind√≠t√°sa", type="primary"):
            downloader = SpotifyAudioDownloader()
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            downloaded_count = 0
            
            for i, link_info in enumerate(st.session_state.spotify_links[:max_downloads]):
                status_text.text(f"Let√∂lt√©s {i+1}/{max_downloads}: {link_info['explanation']}")
                
                # F√°jln√©v gener√°l√°sa
                track_id = downloader.extract_track_id(link_info['spotify_url'])
                if track_id:
                    output_filename = f"track_{track_id}.mp3"
                else:
                    output_filename = f"audio_{i}.mp3"
                
                # Let√∂lt√©s
                if downloader.download_spotify_track(link_info['spotify_url'], output_filename):
                    link_info['downloaded'] = True
                    link_info['filename'] = output_filename
                    downloaded_count += 1
                    st.success(f"‚úÖ {output_filename}: {link_info['explanation']}")
                else:
                    st.error(f"‚ùå Sikertelen: {link_info['explanation']}")
                
                progress_bar.progress((i + 1) / max_downloads)
                
                # V√°rakoz√°s
                time.sleep(delay_seconds)
            
            status_text.text(f"‚úÖ Let√∂lt√©s befejezve! {downloaded_count}/{max_downloads} sikeres.")
            
            if downloaded_count > 0:
                st.balloons()
        
        # Let√∂lt√∂tt f√°jlok list√°z√°sa
        st.markdown("### üìÅ Let√∂lt√∂tt F√°jlok")
        
        audio_files = list(audio_dir.glob("*.mp3"))
        if audio_files:
            for audio_file in audio_files:
                file_size = audio_file.stat().st_size / 1024  # KB
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    st.write(f"üéµ {audio_file.name}")
                
                with col2:
                    st.write(f"{file_size:.1f} KB")
                
                with col3:
                    # Let√∂lt√©si gomb
                    with open(audio_file, "rb") as f:
                        st.download_button(
                            label="üì•",
                            data=f.read(),
                            file_name=audio_file.name,
                            mime="audio/mpeg"
                        )
        else:
            st.info("üìÅ M√©g nincsenek let√∂lt√∂tt audio f√°jlok.")
    
    else:
        st.info("üëÜ Kattints a 'K√©rd√©sek Bet√∂lt√©se' gombra a bal oldali men√ºben!")
    
    # Haszn√°lati √∫tmutat√≥
    with st.expander("üìñ Haszn√°lati √ötmutat√≥"):
        st.markdown("""
        ### üéØ Hogyan haszn√°ld:
        
        1. **K√©rd√©sek Bet√∂lt√©se**: Kattints a bal oldali men√ºben
        2. **Let√∂lt√©si Be√°ll√≠t√°sok**: √Åll√≠tsd be a maxim√°lis let√∂lt√©sek sz√°m√°t
        3. **Let√∂lt√©s Ind√≠t√°sa**: Kattints a nagy k√©k gombra
        4. **V√°rakoz√°s**: A let√∂lt√©s automatikusan folytat√≥dik
        5. **F√°jlok**: A let√∂lt√∂tt f√°jlok megjelennek a list√°ban
        
        ### ‚ö†Ô∏è Fontos:
        - A let√∂lt√©s id≈ëbe telik, k√©rlek v√°rj t√ºrelmesen
        - Csak olyan tartalmakat t√∂lts le, amikhez jogod van
        - A f√°jlok az `audio_files` k√∂nyvt√°rba ker√ºlnek
        
        ### üîß Technikai R√©szletek:
        - A let√∂lt√©s YouTube keres√©sen kereszt√ºl t√∂rt√©nik
        - MP3 form√°tumban ment≈ëdnek a f√°jlok
        - Automatikus min≈ës√©g optimaliz√°l√°s
        """)

if __name__ == "__main__":
    main() 