#!/usr/bin/env python3
"""
Equipment Recognition Project Setup Script
M≈±szaki Berendez√©s Felismer≈ë Projekt Telep√≠t≈ë Script
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def print_header():
    """Print setup header."""
    print("=" * 60)
    print("    M≈±szaki Berendez√©s Felismer≈ë Projekt Telep√≠t≈ë")
    print("    Equipment Recognition Project Setup")
    print("=" * 60)
    print()

def check_python_version():
    """Check if Python version is compatible."""
    print("Python verzi√≥ ellen≈ërz√©se...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Hiba: Python 3.8 vagy √∫jabb verzi√≥ sz√ºks√©ges!")
        print(f"Jelenlegi verzi√≥: Python {sys.version}")
        return False
    
    print(f"‚úÖ Python verzi√≥ megfelel≈ë: {sys.version}")
    return True

def create_virtual_environment():
    """Create virtual environment."""
    print("\nVirtu√°lis k√∂rnyezet l√©trehoz√°sa...")
    
    venv_path = Path("venv")
    
    if venv_path.exists():
        print("‚úÖ Virtu√°lis k√∂rnyezet m√°r l√©tezik")
        return True
    
    try:
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ Virtu√°lis k√∂rnyezet sikeresen l√©trehozva")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Hiba a virtu√°lis k√∂rnyezet l√©trehoz√°sakor")
        return False

def install_dependencies():
    """Install required dependencies."""
    print("\nF√ºgg≈ës√©gek telep√≠t√©se...")
    
    # Determine pip path based on OS
    if os.name == 'nt':  # Windows
        pip_path = Path("venv/Scripts/pip")
    else:  # Unix/Linux/MacOS
        pip_path = Path("venv/bin/pip")
    
    if not pip_path.exists():
        print("‚ùå Hiba: pip nem tal√°lhat√≥ a virtu√°lis k√∂rnyezetben")
        return False
    
    try:
        # Upgrade pip first
        print("pip friss√≠t√©se...")
        subprocess.run([str(pip_path), "install", "--upgrade", "pip"], check=True)
        
        # Install requirements
        print("K√∂nyvt√°rak telep√≠t√©se...")
        subprocess.run([str(pip_path), "install", "-r", "requirements.txt"], check=True)
        
        print("‚úÖ F√ºgg≈ës√©gek sikeresen telep√≠tve")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Hiba a f√ºgg≈ës√©gek telep√≠t√©sekor")
        return False

def create_directories():
    """Create necessary directories."""
    print("\nMapp√°k l√©trehoz√°sa...")
    
    directories = [
        "recognition_results",
        "test_images",
        "models",
        "logs"
    ]
    
    for directory in directories:
        dir_path = Path(directory)
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ Mappa l√©trehozva: {directory}")
        else:
            print(f"‚úÖ Mappa m√°r l√©tezik: {directory}")

def create_sample_config():
    """Create sample configuration if not exists."""
    print("\nKonfigur√°ci√≥ ellen≈ërz√©se...")
    
    config_path = Path("config.json")
    if config_path.exists():
        print("‚úÖ Konfigur√°ci√≥ m√°r l√©tezik")
        return
    
    print("‚úÖ Konfigur√°ci√≥ haszn√°latra k√©sz")

def test_installation():
    """Test if installation works."""
    print("\nTelep√≠t√©s tesztel√©se...")
    
    try:
        # Test basic imports
        test_script = """
import cv2
import numpy as np
import PIL
import requests
print("‚úÖ Alapvet≈ë k√∂nyvt√°rak import√°lva")

# Test OpenCV
print("OpenCV verzi√≥:", cv2.__version__)

# Test numpy
print("NumPy verzi√≥:", np.__version__)

print("‚úÖ Telep√≠t√©s sikeres!")
"""
        
        # Determine python path based on OS
        if os.name == 'nt':  # Windows
            python_path = Path("venv/Scripts/python")
        else:  # Unix/Linux/MacOS
            python_path = Path("venv/bin/python")
        
        result = subprocess.run([str(python_path), "-c", test_script], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print(result.stdout)
            return True
        else:
            print("‚ùå Tesztel√©si hiba:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Tesztel√©si hiba: {e}")
        return False

def print_usage_instructions():
    """Print usage instructions."""
    print("\n" + "=" * 60)
    print("    TELEP√çT√âS BEFEJEZVE - HASZN√ÅLATI √öTMUTAT√ì")
    print("=" * 60)
    
    if os.name == 'nt':  # Windows
        activate_cmd = "venv\\Scripts\\activate"
        python_cmd = "venv\\Scripts\\python"
    else:  # Unix/Linux/MacOS
        activate_cmd = "source venv/bin/activate"
        python_cmd = "venv/bin/python"
    
    print("\n1. Virtu√°lis k√∂rnyezet aktiv√°l√°sa:")
    print(f"   {activate_cmd}")
    
    print("\n2. Program futtat√°sa:")
    print(f"   {python_cmd} equipment_recognition_project.py")
    
    print("\n3. Vagy import√°l√°s Python k√≥dban:")
    print("   from equipment_recognition_project import EquipmentRecognizer")
    
    print("\n4. Konfigur√°ci√≥ testreszab√°sa:")
    print("   Szerkessze a config.json f√°jlt")
    
    print("\n5. API kulcsok be√°ll√≠t√°sa:")
    print("   - Google Vision API kulcs a config.json-ban")
    print("   - Vagy k√∂rnyezeti v√°ltoz√≥: GOOGLE_VISION_API_KEY")
    
    print("\n6. Teszt k√©pek:")
    print("   Helyezzen k√©pf√°jlokat a test_images mapp√°ba")
    
    print("\n7. Eredm√©nyek:")
    print("   Az eredm√©nyek a recognition_results mapp√°ban lesznek")
    
    print("\nüìñ R√©szletes dokument√°ci√≥: README_Equipment_Recognition.md")
    print("üîß T√°mogat√°s: github.com/your-repo/issues")
    print("\n" + "=" * 60)

def main():
    """Main setup function."""
    print_header()
    
    success = True
    
    # Check Python version
    if not check_python_version():
        success = False
        
    # Create virtual environment
    if success and not create_virtual_environment():
        success = False
    
    # Install dependencies
    if success and not install_dependencies():
        success = False
    
    # Create directories
    if success:
        create_directories()
    
    # Create sample config
    if success:
        create_sample_config()
    
    # Test installation
    if success and not test_installation():
        success = False
    
    # Print results
    if success:
        print("\n‚úÖ TELEP√çT√âS SIKERES!")
        print_usage_instructions()
    else:
        print("\n‚ùå TELEP√çT√âSI HIBA T√ñRT√âNT!")
        print("\nEllen≈ërizze a k√∂vetkez≈ëket:")
        print("- Python 3.8+ telep√≠tve van")
        print("- Internet kapcsolat el√©rhet≈ë")
        print("- Megfelel≈ë jogosults√°gok")
        print("- requirements.txt f√°jl l√©tezik")
        
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 